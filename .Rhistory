library(BrailleR)
update.packages(ask=F)
q()
library(devtools)
install("PackageFiles")
library(BrailleR)
chooseCRANmirror(ind=1)
install.packages("rlang")
library(BrailleR)
install.packages("stringi")
library(BrailleR)
install("PackageFiles")
q()
chooseCRANmirror(ind=1)
library(devtools)
install("PackageFiles")
?history
check("PackageFiles")
use_cran_comments
use_cran_comments("PackageFiles")
revdep("PackageFiles")
release("PackageFiles")
release("PackageFiles")
release("PackageFiles")
release("PackageFiles")
q()
library(devtools)
build_win("PackageFiles")
q()
devtools::install_github("pmur002/roloc")
devtools::install("PackageFiles")
q()
devtools::install("PackageFiles")
library(devtools)
install_github("pmur002/rolocISCCNBS")
devtools::install("PackageFiles")
q()
devtools::install("PackageFiles")
q()
library(BrailleR)
GetRStudio()
library(installr)
?install.rstudio
q()
library(devtools)
install_github("pmur002/rolocISCCNBS")
devtools::install("PackageFiles")
install_github("pmur002/roloc")
devtools::install("PackageFiles")
install_github("pmur002/rolocISCCNBS")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
q()
shell("pdftohtml -h")
sink("p2h.txt")
shell("pdftohtml -h")
sink()
shell("pdftohtml -v")
shell("pdftohtml -h")
shell("pdftohtml -s W.pdf W.html")
q()
devtools::install("PackageFiles")
library(BrailleR)
pdf2html("http://www.amstat.org/publications/jse/v23n3/godfrey.pdf" "CanWe.html")
pdf2html("http://www.amstat.org/publications/jse/v23n3/godfrey.pdf", "CanWe.html")
?download
?download.
?download.file
download.file("http://www.amstat.org/publications/jse/v23n3/godfrey.pdf", "CanWe.pdf")
pdf2html("CanWe.pdf")
q()
devtools::install("PackageFiles")
devtools::install("PackageFiles")
library(BrailleR)
Require(rmarkdown)
?suppressPackageStartupMessages
q()
devtools::install("PackageFiles")
q()
devtools::install("PackageFiles")
q()
devtools::install("PackageFiles")
devtools::install("PackageFiles")
.PullWxUsingPip()
WriteR("Well.Rmd")
library(BrailleR)
ls()
WriteR("Well.Rmd")
q()
devtools::install("PackageFiles")
devtools::install("PackageFiles")
library(BrailleR)
WriteR("Well.Rmd")
q()
devtools::install("PackageFiles")
q()
devtools::install("PackageFiles")
devtools::check("PackageFiles")
devtools::check("PackageFiles")
q()
BrailleR::WriteR("qplot.Rmd")
devtools::check("PackageFiles")
devtools::check("PackageFiles")
devtools::check("PackageFiles")
?requireNamespace
library(knitr)
Card = system.file("doc/knitr-refcard.Rmd", package="knitr")
class(Card)
length(Card)
Card
Card
Card = readLines(system.file("doc/knitr-refcard.Rmd", package="knitr"))
length(Card)
Card[2]
Card[1]
Card[3:5]
writeLines(Card, file="knitr.Rmd")
writeLines(Card, filename="knitr.Rmd")
?writeLines
writeLines(Card, con="knitr.Rmd")
BrailleR::WriteR("knitr.Rmd")
?file.copy
BrailleR::WriteR("04b-NewGraphCommands.Rmd")
BrailleR::WriteR("04b-NewGraphCommands.Rmd")
library(devtools)
check("PackageFiles/")
check("./PackageFiles/")
check("./PackageFiles")
release("./PackageFiles")
chooseCRANmirror(ind=1)
install.packages("roloc")
install.packages("rolocISCCNBS")
library(devtools)
build_win("PackageFiles")
release("PackageFiles")
library(BrailleR)
example(UniDesc)
example(OneFactor)
chooseCRANmirror(ind=1)
update.packages(ask=F)
library(BrailleR)
?ls
ls("BrailleR")
ls(BrailleR)
search()
ls(package:BrailleR)
?diff
?diffset
?setdiff
ls("package:BrailleR")
old=read.csv("BrailleRFunctions.csv")
str(old)
setdiff(ls("package:BrailleR"), old[,1])
?scan
cat(paste(setdiff(ls("package:BrailleR"), old[,1]), collapse="\n"), file="extras.txt")
cat(paste(setdiff(old[,1],ls("package:BrailleR")), collapse="\n"), file="shorts.txt")
rmarkdown::render("FirstGo.Rmd")
rmarkdown::render("FirstGo.Rmd")
?file.copy
with(airquality, hist(Ozone))
?airquality
hist(rivers)
names(rivers)
with(ToothGrowth, hist(len))
hist(ukgas)
hist(UKgas)
plot(UKgas)
library(BrailleR)
TimeSeriesPlot(UKgas)
savehistory("JET.R")
?InsectSprays
hist(InsectSprays$count)
?hist
hist(InsectSprays$count, breaks=10)
?OrchardSprays
hist(C(beaver1,beaver2))
hist(c(beaver1,beaver2))
names(beaver1)
hist(co2)
?co2
plot(co2)
?co2
source("JET.R")
source("JET.R")
R2Rmd("JET.R")
rmarkdown::render("JET.Rmd")
rmarkdown::render("JET.Rmd")
rmarkdown::render("JET.Rmd")
source("PandocAll.R")
PandocAll()
library(BrailleR)
GetWxPython3()
library(BrailleR)
GetPython3()
GetWxPython3()
library(BrailleR)
GetWxPython3()
library(reticulate)
py_module_available("wx")
py_available()
use_python()
py_discover_config()$"python"
use_python(py_discover_config()$"python")
py_available()
shell("python --version")
py_config()
py_available(TRUE)
shell("pip")
shell("pip install -U wxPython")
shell("pip install --user -U wxPython")
.Platform$r_arch
library(reticulate)
py_available()
Sys.which("python")
shell("python --version")
shell("python --info")
shell("python -h")
shell("python --version --version")
use_python()
?use_python
py_available(TRUE)
py_discover_config()"python"
py_discover_config()$"python"
use_python(py_discover_config()$"python")
py_available(TRUE)
py_numpy_available()
library(installr)
?install.python
shell("pip install --user numpy")
shell("python.exe -m pip install --user numpy")
library(reticulate)
py_discover_config()
py_config()
Sys.path("python")
SysPath("python")
sys.path("python")
syspath("python")
?Sys.which
Sys.which("python")
normalizePath(Sys.which("python"))
?normalizePath
library(reticulate)
py_discover_config()
names(py_discover_config())
use_python(py_discover_config()$"pythonhome")
py_available()
py_available(TRUE)
py_config()
?py_config
use_python(paste0(py_discover_config()$"pythonhome", "/python"))
py_config()
use_python(py_discover_config()$"python")
py_config()
py_discover_config()
names(py_discover_config())
py_discover_config()"python_versions"
py_discover_config()$"python_versions"
py_discover_config()$"python_versions"[1]
use_python(py_discover_config()$"python_versions"[1])
py_available()
library(devtools)
release("PackageFiles")
check_rhub("PackageFiles")
library(rPython)
chooseCRANmirror(ind=1)
install.packages("rPython")
library(reticulate)
Sys.which("python")
shell(Sys.which("python"))
library(reticulate)
py_config()
py_available()
Sys.which("python")
library(BrailleR)
system.file("python/TestWX.py", package="BrailleR")
system.file("python/TestWX.py", package="BrailleR")
system.file("python/", package="BrailleR")
devtools::install("PackageFiles")
system.file("python/", package="BrailleR")
system.file("python/TestWX.py", package="BrailleR")
shell(paste("python", system.file("python/TestWX.py", package="BrailleR")))
library(BrailleR)
shell("python --version")
strsplit(shell("python --version"), " ")[2]
strsplit(shell("python --version"))
?strsplit
strsplit(shell("python --version"), split=" ", fixed=TRUE)
strsplit(as.character(shell("python --version")), split=" ", fixed=TRUE)
strsplit(as.character(shell("python --version")), split="n", fixed=TRUE)
class(shell("python --version"))
unname(shell("python --version"))
names(shell("python --version"))
as.character(shell("python --version"))
unlist(shell("python --version"))
library(BrailleR)
system.file("Python/TestWX.py", package="BrailleR")
shell(paste("python", system.file("Python/TestWX.py", package="BrailleR")))
q("yes")
library(BrailleR)
shell(paste("python", system.file("Python/TestWX.py", package="BrailleR")))
nchar(Sys.which("python"))
class(nchar(Sys.which("python")))
nchar(Sys.which("python27"))
source("today.txt")
TestWX()
source("today.txt")
TestWX()
source("today.txt")
TestWX()
shell("python --version")
?message
source("today.txt")
TestWX()
names(shell("python --version"))
source("today.txt")
TestWX()
unlist(names(shell("python --version")))
class(names(shell("python --version")))
is.list(shell("python --version"))
source("today.txt")
TestWX()
source("today.txt")
TestWX()
system2("python --version")
?system2
system2("python", "--version")
class(system2("python", "--version"))
source("today.txt")
TestWX()
source("today.txt")
TestWX()
source("today.txt")
TestWX()
source("today.txt")
TestWX()
source("today.txt")
TestWX()
source("today.txt")
TestWX()
?shell
?system
source("today.txt")
TestWX()
?system
source("today.txt")
TestWX()
?system
?system2
source("today.txt")
TestWX()
source("today.txt")
TestWX()
source("today.txt")
TestWX()
library(BrailleR)
source("today.txt")
TestWX()
source("today.txt")
TestWX()
shell('python -c "wx"')
shell('python -c "import wx"')
class(shell('python -c "import wx"'))
shell('python -c "import wx"', intern=TRUE)
system('python -c "import wx"')
system('python -c "import pdfminer"')
foo = system('python -c "import pdfminer"')
foo
system('python -c "import wx"')
system('python -c "import wx"')==0
BrailleR:::.IsWxAvailable()
BrailleR::TextWX()
BrailleR::TextWx()
BrailleR:::TextWx()
BrailleR:::TestWx()
BrailleR:::TestWX()
q()
BrailleR::MakeBatch("Today.R")
BrailleR::TestWX()
well = BrailleR::TestWX()
well
BrailleR:::.IsWxAvailable()
library(devtools)
install("PackageFiles")
install("PackageFiles")
library(devtools)
chooseCRANmirror(ind=1)
install.packages("digest")
install("PackageFiles")
library(devtools)
install("PackageFiles")
install("PackageFiles")
chooseCRANmirror(ind=1)
update.packages("ask=F)
)
")
update.packages(ask=F)
library(devtools)
install("PackageFiles")
library(BrailleR)
TestWX()
devtools::install("PackageFiles")
TestWX()
source("Today.R")
devtools::install("PackageFiles")
source("GetWriteR.R")
rm(list=ls())
q()
source("Messages.R")
ls()
source("Messages.R")
rm(list=ls())
source("Warnings.R")
rm(list=ls())
source("PackageFiles/R/GetPython.R")
source("PackageFiles/R/GetSoftware.R")
source("PackageFiles/R/GetSoftware.R")
source("PackageFiles/R/GetWriteR.R")
source("PackageFiles/R/WriteR.R")
rm(list=ls())
source("PackageFiles/R/pdf2html.R")
source("PackageFiles/R/pdf2html.R")
rm(list=ls())
devtools::install("PackageFiles")
devtools::install("PackageFiles")
q()
devtools::install("PackageFiles")
library(BrailleR)
?GetPython3
library(installr)
?install.pandoc
?install.python
devtools::install("PackageFiles")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
chooseCRANmirror(ind=1)
install.packages("digest")
devtools::install("PackageFiles")
chooseCRANmirror(ind=1)
install.packages("rlang")
devtools::install("PackageFiles")
chooseCRANmirror(ind=1)
install.packages("testit")
devtools::install("PackageFiles")
chooseCRANmirror(ind=1)
update.packages(ask=F)
devtools::install("PackageFiles")
devtools::build("PackageFiles")
devtools::release("BrailleR_0.30.0.tar.gz")
devtools::release("PackageFiles")
devtools::build("PackageFiles")
packageVersion("BrailleR")
devtools::install("PackageFiles")
packageVersion("BrailleR")
?tempdir
prompt("PandocAll.R")
source("PandocAll.R")
prompt(PandocAll)
library(BrailleR)
History2Rmd("now.Rmd")
library(BrailleR)
History2Rmd("now.Rmd")
library(BrailleR)
ProcessAllRmd()
ProcessAllRmd()
ProcessAllRmd()
ProcessAllRmd()
ProcessAllRmd()
ProcessAllRmd()
ProcessAllRmd()
ProcessAllRmd()
ProcessAllRmd()
BrailleR::ProcessAllRmd()
BrailleR::ProcessAllRmd()
BrailleR::ProcessAllRmd()
devtools::install("PackageFiles")
chooseCRANmirror(ind=1)
install.packages("devtools")
devtools::install("PackageFiles")
chooseCRANmirror(ind=1)
install.packages("devtools")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
devtools::install("PackageFiles")
devtools::check("PackageFiles")
devtools::install("PackageFiles")
install.packages("rlang")
chooseCRANmirror(ind=1)
install.packages("rlang")
devtools::install("PackageFiles")
devtools::install_github("talgalili/installr")
installr::install.rtools()
library(usethis)
?use_github_action_check_standard
use_github_action_check_standard()
setwd("PackageFiles/")
use_github_action_check_standard()
library(usethis)
use_spell_check()
devtools::check()
use_spell_check()
use_pkgdown()
q()
library(usethis)
use_github_action("pkgdown")
q()
remotes::install_github("ajrgodfrey/BrailleR", dependencies=TRUE)
